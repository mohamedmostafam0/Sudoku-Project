#include <iostream>
#include <vector>
#include <string>

std::vector<std::vector<std::string>> convertPuzzleToBoard(std::string puzzle) {
    std::vector<std::vector<std::string>> board;
    std::vector<std::string> puzzleArray;
    for (int i = 0; i < puzzle.size(); i++) {
        puzzleArray.push_back(puzzle.substr(i, 1));
    }
    for (int i = 0; i < 9; i++) {
        board.push_back(std::vector<std::string>(puzzleArray.begin() + i * 9, puzzleArray.begin() + (i + 1) * 9));
    }
    for (int i = 0; i < board.size(); i++) {
        for (int j = 0; j < board[i].size(); j++) {
            if (board[i][j] == "-") {
                board[i][j] = "123456789";
            }
        }
    }
    return board;
}

int main() {
    std::string puzzle = ".........";
    std::vector<std::vector<std::string>> board = convertPuzzleToBoard(puzzle);
    for (int i = 0; i < board.size(); i++) {
        for (int j = 0; j < board[i].size(); j++) {
            std::cout << board[i][j] << " ";
        }
        std::cout << std::endl;
    }
    return 0;
}




#include <iostream>
#include <vector>
#include <stack>
#include <queue>
using namespace std;

bool solved(vector<vector<int>>& board) {
    // implementation of solved function
}

vector<vector<int>> setQueue(vector<vector<int>>& board) {
    // implementation of setQueue function
}

bool setValue(vector<vector<int>>& board, vector<int>& curr) {
    // implementation of setValue function
}

vector<vector<int>> solve(vector<vector<int>>& board) {
    queue<vector<int>> queue = setQueue(board);
    stack<vector<int>> stack;
    vector<int> curr;
    while (!queue.empty()) {
        if (solved(board)) {
            return board;
        }
        curr = queue.front();
        queue.pop();
        if (setValue(board, curr)) {
            stack.push(curr);
        }
        else {
            queue.push(curr);
            if (!stack.empty()) {
                queue.push(stack.top());
                stack.pop();
            }
        }
    }
    return board;
}




#include <vector>

struct Cell {
    int row;
    int column;
    int square;
};

bool emptyCell(int cell) {
    // implementation of emptyCell function
}

std::vector<Cell> setQueue(const std::vector<std::vector<int>>& board) {
    int r = 0;
    std::vector<Cell> queue;
    int c;
    for (const auto& row : board) {
        c = 0;
        for (const auto& cell : row) {
            if (emptyCell(cell)) {
                queue.push_back({r, c, getSquare(board, r, c)});
            }
            c += 1;
        }
        r += 1;
    }
    return queue;
}



#include <iostream>
#include <vector>

bool setValue(std::vector<std::vector<std::string>>& board, const std::pair<int, int>& location)
{
    std::string value;
    if(board[location.first][location.second] == "123456789")
    {
        value = findFirstValidValueFromEmptyCell(board, location);
        if(value == "false")
        {
            return false;
        }
        board[location.first][location.second] = value;
        return true;
    }
    else
    {
        value = findFirstValidValueFromFilledCell(board, location);
        if(value == "false")
        {
            board[location.first][location.second] = "123456789";
            return false;
        }
        board[location.first][location.second] = value;
        return true;
    }
}




